{"version":3,"sources":["init/firebase.js","component/Login.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Login","props","login","bind","provider","auth","GoogleAuthProvider","signInWithPopup","then","result","credential","accessToken","catch","err","console","log","Button","onClick","this","className","classes","btn","React","Component","withStyles","backgroundColor","App","state","msg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8TAWEA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAKMR,QAAf,ECRIS,E,YACF,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAM,EAAKA,MAAMC,KAAX,gBAFG,E,qEAKd,IAAIC,EAAU,IAAIb,EAASc,KAAKC,mBAEhCf,EAASc,OAAOE,gBAAgBH,GAAUI,MAAK,SAAAC,GACjCA,EAAOC,WAAWC,eAC7BC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAIhB,OACI,6BACI,kBAACG,EAAA,EAAD,CAASC,QAASC,KAAKhB,MAAOiB,UAAWD,KAAKjB,MAAMmB,QAAQC,KAA5D,+BAGA,0H,GApBIC,IAAMC,WA6BXC,cAAW,CACtBH,IAAI,CACFI,gBAAgB,YAFPD,CAIZxB,GChCG0B,E,YACJ,WAAYzB,GAAO,IAAD,8BAChB,4CAAMA,KACD0B,MAAM,CACTC,IAAI,IAHU,E,sEAOhB,OACA,yBAAKT,UAAU,OACb,kBAAC,EAAD,W,GAVYG,IAAMC,WAeTC,cAAW,CACxBH,IAAI,CACFI,gBAAgB,QAFLD,CAIZE,GCbiBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.6c466f9c.chunk.js","sourcesContent":["import firebase from 'firebase/firebase';\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyC-jP_-JVEi6qJT17z-QcpgbRtUmvOjgEM\",\r\n    authDomain: \"thehouse-506e7.firebaseapp.com\",\r\n    databaseURL: \"https://thehouse-506e7.firebaseio.com\",\r\n    projectId: \"thehouse-506e7\",\r\n    storageBucket: \"thehouse-506e7.appspot.com\",\r\n    messagingSenderId: \"215044779763\",\r\n    appId: \"1:215044779763:web:d690a92558ad6b125f1186\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase;","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport firebase from './../init/firebase';\r\nimport {withStyles } from '@material-ui/core/styles'\r\n\r\nclass Login extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.login=this.login.bind(this);\r\n    }\r\n    login(){\r\n        let provider= new firebase.auth.GoogleAuthProvider();\r\n        //provider.addScope('https://www.googleapis.com/auth/photoslibrary.sharing');\r\n        firebase.auth().signInWithPopup(provider).then(result=>{\r\n            let Token=result.credential.accessToken;\r\n        }).catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Button  onClick={this.login} className={this.props.classes.btn} >\r\n                    Login Con Google y firebase \r\n                </Button>\r\n                <h1>\r\n                    Esto es un ejemplo de implementacion de un login con el servicio de google \"firebase\"\r\n                </h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default withStyles({\r\n    btn:{\r\n      backgroundColor:'#0EAFFF'\r\n    }\r\n})(Login);\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {withStyles } from '@material-ui/core/styles'\nimport Login from './component/Login';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      msg:''\n    }\n    }\n  render(){\n    return (\n    <div className=\"App\">\n      <Login/>\n    </div>\n  );\n  }\n}\nexport default withStyles({\n  btn:{\n    backgroundColor:'red'\n  }\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}